{
    "ffps": "6",
    "code": "#include <stdint.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <signal.h>\n#include <stdbool.h>\n#include <time.h>\n#include <sys/time.h>\n\n\n\n#include \"clk.h\"\n#include \"gpio.h\"\n#include \"dma.h\"\n#include \"pwm.h\"\n#include \"version.h\"\n\n#include \"ws2811.h\"\n#include <math.h>\n\n\n#include \"potato.h\"\n\nDEFVAR(color_t, col);\nDEFVAR(float, min_width);\nDEFVAR(float, max_width);\nDEFVAR(float, min_vel);\nDEFVAR(float, max_vel);\n\n\n#define TARGET_FREQ             WS2811_TARGET_FREQ\n#define GPIO_PIN                21\n#define STRIP_TYPE              WS2811_STRIP_GBR\t\t// WS2812/SK6812RGB integrated chip+leds\n\n#define LED_COUNT               138\n\nws2811_t ledstring =\n{\n    .freq = TARGET_FREQ,\n    .channel =\n    {\n        [0] =\n        {\n            .gpionum = GPIO_PIN,\n            .count = LED_COUNT,\n            .invert = 0,\n            .brightness = 255,\n            .strip_type = STRIP_TYPE,\n        },\n        [1] =\n        {\n            .gpionum = 0,\n            .count = 0,\n            .invert = 0,\n            .brightness = 0,\n        },\n    },\n};\n\ntypedef struct\n{\n    float pos;\n    float vel;\n    float blue;\n    float green;\n    float red;\n    int width;\n} ball_t;\n\n#define BALL_COUNT 10\n\n#define LED_MAX 0x32\n\nball_t balls[BALL_COUNT];\n\nstatic uint8_t running = 1;\n\nfloat rand_float(float min, float max)\n{\n    int r = rand();\n    float frac = (float)r / (float)RAND_MAX;\n    return (min + (max-min) * frac);\n}\n\nvoid ball_init(ball_t *ball)\n{\n    ball->width = rand_float(min_width, max_width);\n\n    ball->pos = -ball->width / 2;\n\t\t\n    ball->vel = rand_float(min_vel, max_vel);\n\t\t\n    if(rand() & 1)\n    {\n      ball->vel = -ball->vel;\n      ball->pos = LED_COUNT + ball->width / 2;\n    }\n\n    ball->red = rand_float(0,1);\n    ball->green = rand_float(0,1);\n    ball->blue = rand_float(0,1);\n}\n\nvoid balls_init(void)\n{\n    for(int i = 0; i < BALL_COUNT; i++)\n\t\tball_init(&balls[i]);\n}\n\n\nvoid balls_step(float t)\n{\n    for(int i = 0; i < BALL_COUNT; i++)\n    {\n      balls[i].pos += balls[i].vel * t;\n      if(balls[i].pos > (LED_COUNT + balls[i].width) ||\n         balls[i].pos < (0 - balls[i].width))\n      {\n          ball_init(&balls[i]);\n      }\n    }\n}\n\nfloat to_led(float v)\n{\n    return ((float)LED_MAX) * powf(v, 1.5f);\n}\n\nDEFVAR(int, tails);\n\nDEFVAR(int, clock_pos);\n\nvoid balls_render(ws2811_led_t *leds)\n{\n  \n  struct timeval tv;\n  gettimeofday(&tv, NULL);\n  \n  // 6 hits\n  int secs = tv.tv_sec % 60;\n  // 6 bits\n  int mins = (tv.tv_sec/60) % 60;\n  // 5 bits\n  int hours = (tv.tv_sec/60/60) % 24;\n  \n  // total = 17 bits\n  // + 4 separators = 21 bits\n  \n  \n    for(int i = 0; i < LED_COUNT; i++)\n    {\n      float max_r = 0;\n      float max_g = 0;\n      float max_b = 0;\n\n      for(int j = 0; j < BALL_COUNT; j++)\n      {\n          float half_width = balls[j].width/2;\n          float ball_left = (float)balls[j].pos - half_width;\n          float ball_right = (float)balls[j].pos + half_width;\n\n          if(ball_left < i && ball_right > i)\n          {\n            float ball_frac = ((float)i - ball_left) / balls[j].width;\n    \t\tfloat x = sin(ball_frac * 3.14159f);\n            \n            if(tails) {\n                if(balls[j].vel > 0) ball_frac = 1-ball_frac;\n            \tx = cos(ball_frac * 3.14159f / 2);\n            }\n\n            float r = x * balls[j].red;\n            float g = x * balls[j].green;\n            float b = x * balls[j].blue;\n\n            if(r > max_r) max_r = r;\n            if(g > max_g) max_g = g;\n            if(b > max_b) max_b = b;\n          }\n      }\n\n      int red  = to_led(max_r * col.r);\n      int green = to_led(max_g * col.g);\n      int blue = to_led(max_b * col.b);\n  \n      #define CLOCK_LEN 21\n      if(i >= clock_pos && i < clock_pos + CLOCK_LEN)\n      {\n        int clock_bit = clock_pos + CLOCK_LEN - i - 1;\n        /* We're in the clock! */\n        red = 0;\n        green = 0;\n        blue = 0;\n        if(clock_bit == 0 || clock_bit == 7 || clock_bit == 14 || clock_bit == 20) {\n          red = green = blue = to_led(1);\n        } else if(clock_bit < 7) {\n          /* Seconds */\n          int bit = clock_bit - 1;\n          green = to_led((secs >> bit) & 1 ? 1.f : 0.f);\n        } else if (clock_bit < 14) {\n          /* Minutes */\n          int bit = clock_bit - 9;\n          blue = to_led((mins >> bit) & 1 ? 1.f : 0.f);\n        } else if (clock_bit < 20) {\n          /* Hours */\n          int bit = clock_bit - 17;\n          red = to_led((hours >> bit) & 1 ? 1.f : 0.f);\n        }\n      }\n      leds[i] = (blue << 16) | (green << 8) | red;\n    }\n}\n\nstatic void ctrl_c_handler(int signum)\n{\n    (void)(signum);\n    running = 0;\n}\n\nstatic void setup_handlers(void)\n{\n    struct sigaction sa =\n\t{\n\t    .sa_handler = ctrl_c_handler,\n\t};\n\n    sigaction(SIGINT, &sa, NULL);\n    sigaction(SIGTERM, &sa, NULL);\n}\n\n\nvoid init()\n{\n  setup_handlers();\n\n  ws2811_init(&ledstring);\n\n  srand(time(0));\n\n  balls_init();\n}\n\nDEFVAR(int, solid_mode);\n\nvoid work(float dt)\n{\n  \n  if(solid_mode)\n  {\n    for(int i = 0; i < LED_COUNT; i++)\n    {\n      int red  = to_led(col.r);\n      int blue = to_led(col.b);\n      int green = to_led(col.g);\n\n      ledstring.channel[0].leds[i] = (blue << 16) | (green << 8) | red;\n    }\n    ws2811_render(&ledstring);\n    return;\n  }\n  \n  balls_step(dt/1000);\n  balls_render(ledstring.channel[0].leds);\n  ws2811_render(&ledstring);\n}",
    "fposition": "3.1415926",
    "fvelocity": "-3",
    "iahha": "1",
    "ihaha2": "5",
    "fps": 34,
    "position": 867,
    "layout": [
        {
            "type": "Float Slider",
            "name": "fps",
            "min": 0,
            "max": 50,
            "configured": true
        },
        {
            "type": "Color Picker",
            "name": "col",
            "min": null,
            "max": null,
            "configured": true
        },
        {
            "type": "Float Slider",
            "name": "min_width",
            "min": 1,
            "max": 100,
            "configured": true
        },
        {
            "type": "Float Slider",
            "name": "max_width",
            "min": 1,
            "max": 100,
            "configured": true
        },
        {
            "type": "Float Slider",
            "name": "min_vel",
            "min": 1,
            "max": 100,
            "configured": true
        },
        {
            "type": "Float Slider",
            "name": "max_vel",
            "min": 1,
            "max": 100,
            "configured": true
        },
        {
            "type": "Switch",
            "name": "solid_mode"
        },
        {
            "type": "Switch",
            "name": "tails"
        },
        {
            "type": "Float Slider",
            "name": "clock_pos",
            "min": 1,
            "max": 140,
            "configured": true
        }
    ],
    "col": 4408832,
    "min_width": 9,
    "max_width": 34,
    "min_vel": 57,
    "max_vel": 83,
    "redness": 95,
    "blueness": 0,
    "solid_mode": 0,
    "use_sin": 0,
    "tails": 0,
    "thing": 1,
    "clock_pos": 140,
    "leeee": 3
}